1. What is the largest positive value that can be represented with an
unsigned 8 bit number? Explain.

  Solution:
    2^8 - 1 = 255
    For an unsigned 8 bit number, there are 2^8 = 256 possible values.
    Since zero is reserved, leaving 255 bit sequences for storing positive
    values, the largest positive value is 255.

2. What is the largest positive value that can be represented with a 2’s
complement 8 bit number? Explain.

  Solution:
    2^8 / 2 - 1 = 2^7 - 1 = 127
    Since 8 bits provide 256 possible sequences, and the two possible
    values of the high-order bit, which indicates whether the value is
    interpreted as negative, are both 0.5, the sets of negative values and
    non-negative values both contain 128 elements. The largest positive
    value is 127, after 0 taking its reserved seat in the non-negative
    set.


3. Convert the unsigned 8 bit binary value 10100110 to decimal. Show your
work.

  Solution:
    2^7 + 2^5 + 2^2 + 2 = 128 + 32 + 4 + 2 = 166

4. Convert the signed 8 bit binary value 10100110 to decimal. Show your
work.

  Solution:
    -2^7 + 2^5 + 2^2 + 2 = -128 + 32 + 4 + 2 = -90

5. For the following 8 bit binary values (show your work):

  value 1: 01011101
  value 2: 01100101

  a. What is the binary representation of the result of adding them
  together? Does this operation result in overflow? If so, when (i.e.,
  under what circumstances / interpretations of the values)?

  Solution:
    11000010
    The addition doesn't overflow for unsigned arithmetic, while it does
    for signed arithmetic.
    For unsigned/signed interpretations:
      value 1 = 2^6 + 2^4 + 2^3 + 2^2 + 2^0 = 64 + 16 + 8 + 4 + 1 = 93
      value 2 = 2^6 + 2^5 + 2^2 + 2^0 = 64 + 32 + 4 + 1 = 101

  b. What is the decimal representation of the resulting addition if the
  two values are signed 8 bit values?

    Solution:
      -2^7 + 2^6 + 2 = -128 + 64 + 2 = -62

  c. What is the decimal representation of the resulting addition if the
  two values are unsigned 8 bit values?

    Solution:
      2^7 + 2^6 + 2 = 128 + 64 + 2 = 194

  d. What is the binary representation of the result of subtracting the
  second from the first? Does this operation result in overflow? If so,
  when?

    Solution:
      11111000
      The substraction overflows for unsigned interpretation, while it
      doesn't fpr signed interpretation.

6. Convert the following 2-byte binary numbers to hexadecimal, indicating
how each part is converted (the binary values are shown with spaces between
each 4 digits just to make them easier to read):

  a. 0000 0110 0001 1111

  b. 1100 0101 1110 0101

  c. 1010 0111 1101 0110

  Solution:
    a. 0b0110 = 0x6, 0b1111 = 0xF.               => 0x061F
    b. 0b1100 = 0xC, 0b0101 = 0x5, 0b1110 = 0xE. => 0xC5E5
    c. 0b1010 = 0xA, 0b0111 = 0x7, 0b1101 = 0xD. => 0xA7D6

7. Convert the following hexadecimal numbers to binary, indicating how you
converted each digit:

  a. 0x23

  b. 0x852

  c. 0xc1a6

  d. 0xefab

  Solution:
    a. 0x23 = 0b 0010 0011 = 0b100011
    b. 0x852 = 0b 1000 0101 0010 = 0b100001010010
    c. 0xc1a6 = 0b 1100 0001 1010 0110 = 0b1100000110100110
    d. 0xefab = 0b 1110 1111 1010 1011 = 0b1110111110101011

8. Convert the following decimal values to 8 bit (2’s complement) binary
and to hexadecimal. Show your work:

  a. 12

  b. -36

  c. 123

  d. -123

  Solution:
    a. 12 / 2 = 6, 6 / 2 = 3, 3 / 2 = 1...1, 1 / 2 = 0...1; => 0b00001100
    b. -36 + 2^7 = -36 + 128 = 92;
       92 / 2 = 46, 46 / 2 = 23, 23 / 2 = 11...1, 11 / 2 = 5...1,
       5 / 2 = 2...1, 2 / 2 = 1, 1 / 2 = 0...1; => 0b11011100
    c. 123 / 2 = 61...1, 61 / 2 = 30...1, 30 / 2 = 15, 15 / 2 = 7...1,
       7 / 2 = 3...1, 3 / 2 = 1...1, 1 / 2 = 0...1; => 0b01111011
    d. -123 + 2^7 = 5;
       5 / 2 = 2...1, 2 / 2 = 1, 1 / 2 = 0...1; => 0b10000101

9. Given the following 4 bit binary values, show the results of each bit-
wise operation, showing both the binary and decimal result value for each
(list the unsigned decimal value):

  a. 0110 | ~(1010)

  b. ~(0110 | 1010)

  c. 0111 & ~(1001)

  d. (1010 | 0000) & 1111

  e. 0011 ^ 1110

  f. 0111 << 2

  g. 0111 >> 2

  Solution:
    a. 0110 | ~(1010) = 0110 | 0101 = 0111, 0b0111 = 7
    b. ~(0110 | 1010) = ~(1110) = 0001, 0b0001 = 1
    c. 0111 & ~(1001) = 0111 & 0110 = 0110, 0b0110 = 6
    d. (1010 | 0000) & 1111 = 1010 & 1111 = 1010, 0b1010 = 10
    e. 0011 ^ 1110 = 1101, 0b1101 = 13
    f. 0111 << 2 = 1100, 0b1100 = 12
    g. 0111 >> 2 = 0001, 0b0001 = 1
